<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--导入shiro的配置文件-->
	<import resource="spring-shiro.xml"/>

	<!--aop开启注解代理-->
	<!--
	 1.要被增强的目标类：edu.cqupt.aop_testtest.Book
	 2.用于去增强的切面类：edu.cqupt.aop_testtest.MyBook
	    > 类上添加@Aspect
	    > 方法上添加通知@Bofore(value="execution(* edu.cqupt.aop_testtest.Book.*(..))")
	 3.创建目标类，切面类的实例 @Compoment
	 4.调用Book的方法会发现被增强了

	-->
	<aop:aspectj-autoproxy/>

	<!--注解扫描-->
	<context:component-scan base-package="edu.cqupt.domain"/>
	<context:component-scan base-package="edu.cqupt.mapper"/>
	<context:component-scan base-package="edu.cqupt.service"/>
	<context:component-scan base-package="edu.cqupt.serviceImpl"/>
	<context:component-scan base-package="edu.cqupt.controller"/>
	<!--用于测试的包-->
	<context:component-scan base-package="edu.cqupt.aop_test"/>


	<!--配置数据源-->
	  <!--加载外部数据库配置文件-->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	  <!--正式开搞！c3p0！-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		  destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--========来一条华丽的分割线==========-->
			<!--配置连接池的相关配置参数，按需-->
		<property name="minPoolSize" value="2" />
		<property name="maxPoolSize" value="10" />
		<property name="initialPoolSize" value="10" />
	</bean>

	<!--spring管理SqlSessionFactory：此处使用到spring和mybatis的整合包中SqlSessionFactoryBean
	    简单粗暴一点：1.提供数据源 2.提供mybatis的配置文件
	                3.mapper.xml和mapper.java放在同一包下，后续一同配置管理
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"/>
		<!--<property name="mapperLocations" value="classpath*:edu/cqupt/mapper/*.xml"/>-->
	</bean>

	<!--mapper扫描：在spring容器中直接获取mapper的代理对象
	    把mapper.xml和mapper.java放在同一包下
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="edu.cqupt.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!--事务管理器走一波-->
	<bean id="dataSourceTransactionManager"  class=" org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
</beans>
